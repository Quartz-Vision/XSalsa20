name: CI/CD

on:
  release:
    types: [ published ]

jobs:
  # Main build - for everything
  build-full:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        if [ "$RUNNER_OS" = "Linux" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential cmake
        elif [ "$RUNNER_OS" = "macOS" ]; then
          brew install cmake
        elif [ "$RUNNER_OS" = "Windows" ]; then
          choco install cmake
        fi
      shell: bash

    - name: Configure and build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DBUILD_TESTS=ON -DBUILD_BENCHMARKS=ON
        cmake --build . --config ${{ matrix.build_type }} --parallel

    - name: Run tests
      run: |
        cd build
        if [ "$RUNNER_OS" = "Windows" ]; then
          ctest -C ${{ matrix.build_type }} --output-on-failure
        else
          ctest --output-on-failure
        fi
      shell: bash

  # Build artifacts for release
  artifacts:
    runs-on: ubuntu-latest
    needs: build-full
    if: always() && needs.build-full.result == 'success'

    strategy:
      matrix:
        artifact: [static, shared, cross-compile]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake gcc-mingw-w64 g++-mingw-w64

    - name: Build ${{ matrix.artifact }} library
      run: |
        mkdir build-${{ matrix.artifact }}
        cd build-${{ matrix.artifact }}
        
        if [ "${{ matrix.artifact }}" = "static" ]; then
          cmake .. -DBUILD_STATIC=ON -DBUILD_SHARED=OFF -DBUILD_TESTS=OFF -DBUILD_BENCHMARKS=OFF
        elif [ "${{ matrix.artifact }}" = "shared" ]; then
          cmake .. -DBUILD_STATIC=OFF -DBUILD_SHARED=ON -DBUILD_TESTS=OFF -DBUILD_BENCHMARKS=OFF
        elif [ "${{ matrix.artifact }}" = "cross-compile" ]; then
          cmake .. -DCMAKE_TOOLCHAIN_FILE=../cmake/windows-toolchain.cmake -DBUILD_STATIC=ON -DBUILD_SHARED=OFF -DBUILD_TESTS=OFF -DBUILD_BENCHMARKS=OFF
        fi
        
        cmake --build . --parallel

    - name: Create distribution package
      run: |
        cd build-${{ matrix.artifact }}
        make DESTDIR=./install install
        
        if [ "${{ matrix.artifact }}" = "static" ]; then
          tar -czf xsalsa20-static-linux-x86_64.tar.gz -C install .
        elif [ "${{ matrix.artifact }}" = "shared" ]; then
          tar -czf xsalsa20-shared-linux-x86_64.tar.gz -C install .
        elif [ "${{ matrix.artifact }}" = "cross-compile" ]; then
          tar -czf xsalsa20-static-windows-x86_64.tar.gz -C install .
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: xsalsa20-${{ matrix.artifact }}-${{ matrix.artifact == 'cross-compile' && 'windows-x86_64' || 'linux-x86_64' }}
        path: build-${{ matrix.artifact }}/xsalsa20-${{ matrix.artifact }}-${{ matrix.artifact == 'cross-compile' && 'windows-x86_64' || 'linux-x86_64' }}.tar.gz

  release:
    runs-on: ubuntu-latest
    needs: artifacts
    if: github.event_name == 'release'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create release assets
      run: |
        mkdir release-assets
        cp xsalsa20-static-linux-x86_64/xsalsa20-static-linux-x86_64.tar.gz release-assets/
        cp xsalsa20-shared-linux-x86_64/xsalsa20-shared-linux-x86_64.tar.gz release-assets/
        cp xsalsa20-cross-compile-windows-x86_64/xsalsa20-static-windows-x86_64.tar.gz release-assets/

    - name: Upload release assets
      uses: ncipollo/release-action@v1
      with:
        artifacts: "release-assets/*.tar.gz"
        token: ${{ secrets.GITHUB_TOKEN }} 